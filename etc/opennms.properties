#
# This properties file allows you to set global properties for the opennms
# application.  These properties will be set as system properties at the
# beginning of Java startup.  Any properties set on the Java command-line
# with -Dproperty=value will be overridden by these values.
#

#
# OpenNMS provides two different SNMP implementations.  JoeSNMP is the
# original OpenNMS # SNMP Library and provides SNMP v1 and v2 support.
# SNMP4J is a new 100% Java SNMP library # that provides support for SNMP
# v1, v2 and v3.  
#
# To enable the JoeSnmp library uncomment the following line.
#org.opennms.snmp.strategyClass=org.opennms.netmgt.snmp.joesnmp.JoeSnmpStrategy
#
# The SNMP4J library is currently the default.  But can also be set with
# the following line.
#
# Default:
#org.opennms.snmp.strategyClass=org.opennms.netmgt.snmp.snmp4j.Snmp4JStrategy

#
# On very large systems the OpenNMS default mechanism of storing one data
# source per RRD file can be very I/O Intensive.  Many I/O subsystems fail
# to keep up with the vast amounts of data that OpenNMS can collect in this
# situation.  We have found that in those situations having fewer large files
# with multiple data sources in each performs better than many smaller files,
# each with a single data source.  This option enables all of the data sources
# belonging to a single collection group to be stored together in a single
# file.  To enable this setting uncomment the below line and change it to
# 'true'.  Also note that the snmp-graph.properties will need to change as
# it indicates which files need to exist for each graph.  Look in 
# /usr/src/redhat/BUILD/opennms-1.3.2-2/source/target//var/tmp/opennms-1.3.2-root/etc/examples/store-by-group-snmp-graph.properties for an
# example of the changes.
# 
# Default:
#org.opennms.rrd.storeByGroup=false

#
# Though this is not strictly an OpenNMS property this is a setting that you
# may need to set if you are using the distributed monitor either via webstart
# or the command-line remote poller.  In these cases, all of the remote
# monitors need a hostname or IP address they can resolve to locate the
# central OpenNMS server.  This code uses Java's RMI protocol to communicate
# and needs to know the name the client will use to connect.  This will be
# especially true if the client must connect to the server thru a firewall.
#
# The default behavior is for it to pick one of the IP addresses of the server
# host.
#
#java.rmi.server.hostname=<some server ip address>
