<?xml version="1.0"?>
<syslogd-configuration>
    <configuration
            syslog-port="10514"
            new-suspect-on-message="false"
            parser="org.opennms.netmgt.syslogd.CustomSyslogParser"
            forwarding-regexp="^.*\s(19|20)\d\d([-/.])(0[1-9]|1[012])\2(0[1-9]|[12][0-9]|3[01])(\s+)(\S+)(\s)(\S.+)"
            matching-group-host="6"
            matching-group-message="8"
            discard-uei="DISCARD-MATCHING-MESSAGES"
            />

    <!--
        NOTE: This uses the CustomSyslogParser and forwarding-regexp for backwards compatibility.  If your
        syslog sources will always use a particular format, it's better to use one of the more specific parsers
        in the "parser" attribute, above.

        Available parsers:

        * org.opennms.netmgt.syslogd.CustomSyslogParser: A backwards-compatible parser that has the same behavior
          as OpenNMS 1.8 (and previous).  It has relaxed standards and can usually pull data out of most BSD-
          or Syslog-NG-style traps.
        * org.opennms.netmgt.syslogd.SyslogNGParser: A stricter variant of the CustomSyslogParser which parses
          Syslog-NG's default format.  It ignores forwarding-regexp, matching-group-host, and matching-group-message
          and instead relies on a well-known properly-formatted syslog message.
        * org.opennms.netmgt.syslogd.Rfc5424SyslogParser: A parser that handles the new Syslog standard (as
          defined in RFC5424).  It has strict parsing that should match the grammar specified in the RFC, although
          it currently discards structured data.  Like the SyslogNGParser, it ignores forwarding-regexp,
          matching-group-host, and matching-group-message in favor of stricter parsing of the known grammer.

        *** PERFORMANCE NOTES ***

        For the most deterministic performance of OpenNMS when matching syslog messages, you should *always*
        anchor your regular expression matches with ^ and $, like in the examples below.  Failure to do so can
        cause extreme slowdowns, especially with large amounts of <ueiMatch> tags.
    -->

    <!-- Use the following to convert UEI ad-hoc -->
    <ueiList>
        <ueiMatch>
            <match type="substr" expression="CRISCO"/>
            <uei>CISCO</uei>
        </ueiMatch>
        <ueiMatch>
            <match type="regex" expression="^.*fancyd: .*failed for user (\S+) on ((pts\/\d+)|(tty\d+)).*$"/>
            <uei>uei.example.org/syslog/fancyd/userFailure</uei>
            <!-- In the event definition for the above UEI, you can refer to the
                 parenthesized match groups above:
                 %parm[group1]% or %parm[#1]% will have the username
                 %parm[group2[% or %parm[#2]% will have the device name
                 
                 These mappings are created by default. The definition below
                 shows how to suppress them and how to map matching groups
                 to user-specified event parameters.
            -->
        </ueiMatch>
        <ueiMatch>
            <match type="regex" expression="^.*shmancyd: .*failed for user (\S+) on ((pts\/\d+)|(tty\d+)).*$" default-parameter-mapping="false"/>
            <uei>uei.example.org/syslog/shmancyd/userFailure</uei>
        	<parameter-assignment matching-group="1" parameter-name="userName" />
        	<parameter-assignment matching-group="2" parameter-name="terminalName" />
        	<parameter-assignment matching-group="3" parameter-name="ptsName" />
        	<parameter-assignment matching-group="4" parameter-name="ttyName" />
            <!-- The event created by this definition will not have the "groupN" parameters.
                 If the message refers to a user on terminal pts/3, the "ptsName" parameter
                 will be set to "pts/3" and the "ttyName" parameter will be present with an
                 empty string value.  If the message instead refers to a user on tty4, then
                 the "ttyName" parameter will be set to "tty4" and the "ptsName" parameter
                 will have an empty string value.  In either case, the "terminalName" parameter
                 will contain the terminal name that matched.                  
            -->
        </ueiMatch>
        <!-- Use the following to discard a syslog message without ever creating an event for it.
             If you change the value of "discard-uei" above, you must change the UEI used here to match. -->
        <ueiMatch>
            <match type="substr" expression="JUNK"/>
            <uei>DISCARD-MATCHING-MESSAGES</uei>
        </ueiMatch>
    </ueiList>

    <!-- Use the following to remove a syslog message from the event-trail -->

    <hideMessage>
        <hideMatch>
            <match type="substr" expression="SECRET"/>
        </hideMatch>
        <hideMatch>
            <match type="regex" expression="^.*(double|triple)secret.*$"/>
        </hideMatch>
    </hideMessage>

</syslogd-configuration>
