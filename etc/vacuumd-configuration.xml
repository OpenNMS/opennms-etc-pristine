<VacuumdConfiguration period="86400000" >
  <statement>
    <!-- this deletes all the nodes that have been marked as deleted - it relies on cascading deletes -->
    DELETE FROM node WHERE node.nodeType = 'D';
  </statement>
   
  <statement>
    <!-- this deletes all the interfaces that have been marked as deleted - it relies on cascading deletes -->
    DELETE FROM ipInterface WHERE ipInterface.isManaged = 'D';
  </statement>
   
  <statement>
    <!-- this deletes all the services that have been marked as deleted - it relies on cascading deletes -->
    DELETE FROM ifServices WHERE ifServices.status = 'D';
  </statement>
   
  <statement>
    <!-- this deletes any events that are not associated with outages - Thanks to Chris Fedde for this -->
    DELETE FROM events WHERE NOT EXISTS 
      (SELECT svclosteventid FROM outages WHERE svclosteventid = events.eventid  
    UNION 
      SELECT svcregainedeventid FROM outages WHERE svcregainedeventid = events.eventid 
    UNION 
      SELECT eventid FROM notifications WHERE eventid = events.eventid) 
    AND eventtime &lt; now() - interval '6 weeks';
  </statement>
    
  <automations>
    <automation name="cosmicClear" interval="30000" trigger-name="selectResolvers" action-name="clearProblems" active="true" />
    <automation name="cleanUp" interval="30000" action-name="deletePastClearedAlarms" active="true" />
    <automation name="GC" interval="300000" action-name="garbageCollect" active="true" />
    <automation name="unclear" interval="30000" trigger-name="selectClearedAlarms" action-name="resetSeverity" active="true" />
    <automation name="escalation" interval="30000" trigger-name="selectSuspectAlarms" action-name="escalateAlarm" action-event="eventEscalated" active="true" />
    <automation name="purgeStatisticsReports" interval="3600000" action-name="deletePurgeableStatisticsReports" active="true" />
  </automations>
  
  <triggers>
  
    <trigger name="selectSuspectAlarms" operator="&gt;=" row-count="1" >
      <statement>
          SELECT a.alarmid as _alarmid, 
                 a.eventuei as _eventuei, 
                 a.nodeid as _nodeid, 
                 a.ipaddr as _ipaddr, 
                 a.serviceid as _serviceid,
                 s.servicename as _servicename,
                 now() as _ts
            FROM alarms a
 LEFT OUTER JOIN service s
              ON s.serviceid = a.serviceid
           WHERE alarmType = 1
             AND severity &gt; 3
             AND severity &lt; 7
             AND alarmacktime IS NULL
             AND COALESCE(lastautomationtime, lasteventtime) &lt; now() - interval '60 minutes'
      </statement>
    </trigger>
  
    <trigger name="selectClearedAlarms" operator="&gt;=" row-count="1" >
      <statement>
        SELECT a.alarmid as _id, e.eventseverity AS _sev, now() as _ts
          FROM alarms a
          JOIN events e 
            ON e.eventid = a.lasteventid
         WHERE severity = 2
           AND alarmtype = 1
           AND a.lasteventtime > a.lastautomationtime
      </statement>
    </trigger>
  
    <trigger name="selectResolvers" operator="&gt;=" row-count="1" >
      <statement>
        SELECT *, now() as _ts 
          FROM alarms 
         WHERE alarmType=2
      </statement>
    </trigger>
  </triggers>
    
  <actions>
  
    <action name="escalateAlarm" >
      <statement>
        UPDATE alarms
           SET severity = severity +1, firstautomationtime = COALESCE(firstautomationtime, ${_ts}), lastautomationtime = ${_ts}
         WHERE alarmid = ${_alarmid}
      </statement>
    </action>
  
    <action name="resetSeverity" >
      <statement>
        UPDATE alarms
           SET severity = ${_sev}, firstautomationtime = COALESCE(firstautomationtime, ${_ts}), lastautomationtime = ${_ts}
         WHERE alarmid = ${_id}
      </statement>
    </action>

    <!-- action used for postgres 7.4 compatibility -->
    <action name="garbageCollect" >
      <statement>
        DELETE FROM alarms
         WHERE COALESCE(lastautomationtime, lasteventtime) &lt; now() - interval '5 days'
           AND alarmacktime IS NULL
      </statement>
    </action>
  
    <!-- a better action when using postgres 8.1 
    <action name="garbageCollect" >
      <statement>
        DELETE FROM alarms
         WHERE GREATEST(lastautomationtime, lasteventtime) &lt; now() - interval '5 days'
           AND alarmacktime IS NULL
      </statement>
    </action>
    -->
  
    <action name="deletePastClearedAlarms" >
      <statement>
        DELETE from alarms
         WHERE severity &lt;= 3
           AND COALESCE(lastautomationtime, lasteventtime) &lt; now() - interval '2 minutes'
           AND alarmacktime IS NULL
      </statement>
    </action>
  
<!--
    <action name="clearProblems" >
      <statement>
        UPDATE alarms 
           SET severity=2, firstautomationtime = COALESCE(firstautomationtime, ${_ts}), lastautomationtime = ${_ts}
         WHERE alarmType=1 
           AND severity &gt; 2 
           AND lastEventTime &lt;  ${lastEventTime} 
           AND eventUei = ${clearUei} 
           AND COALESCE(dpName, '') = COALESCE(${dpName}, '') 
           AND COALESCE(nodeID, 0) = COALESCE(${nodeID}, 0) 
           AND COALESCE(ipaddr, '') = COALESCE(${ipaddr}, '') 
           AND COALESCE(serviceID, 0) = COALESCE(${serviceID}, 0)
      </statement> 
    </action>
-->

    <!--  New and optimized version of clearing problems -->
    <action name="clearProblems" >
      <statement>
        UPDATE alarms 
           SET severity=2, firstautomationtime = COALESCE(firstautomationtime, ${_ts}), lastautomationtime = ${_ts}
         WHERE alarmType=1 
           AND severity &gt; 2 
           AND lastEventTime &lt;  ${lastEventTime} 
           AND reductionKey = ${clearKey} 
      </statement> 
    </action>
    
    <action name="deletePurgeableStatisticsReports" >
      <statement>
        DELETE from statisticsReport
         WHERE purgeDate &lt; now()
      </statement>
    </action>

  </actions>

  <!--  Deprecating this element... see the new <action-events> element -->    
  <auto-events>
    <auto-event name="escalationEvent" >
      <uei>uei.opennms.org/vacuumd/alarmEscalated</uei>
    </auto-event>
  </auto-events>

  <!-- Note: action events that have org.apache.maven.project.MavenProject@265b7e51 tokens require the for-each-result attribute to be set to true -->
  <action-events>
    <action-event name="eventEscalated" for-each-result="true" >
      <assignment type="field" name="uei" value="uei.opennms.org/vacuumd/alarmEscalated" />
      <assignment type="field" name="nodeid" value="${_nodeid}" />
      <assignment type="field" name="interface" value="${_ipaddr}" />
      <assignment type="field" name="service" value="${_servicename}" />
      <assignment type="parameter" name="alarmId" value="${_alarmid}" />
      <assignment type="parameter" name="alarmEventUei" value="${_eventUei}" />
    </action-event>
  </action-events>
  
</VacuumdConfiguration>