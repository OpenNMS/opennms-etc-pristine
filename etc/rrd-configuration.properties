################################################################################
# This file is the configuration for the the RrdUtils class.  It is used to
# specify the details of the Rrd backend
################################################################################
#
# Properties are defined but commented out indicating the default values.
#

#
# This property defines whether to use the original JNI RrdTool based code or the
# newer pure java JRobin code.  The file formats of these are not the same.  If you
# use JRobin to do data collectin then you also need to add -Djava.awt.headless=true
# to Tomcat start up so that the JRobin code can properly generate the graphs.
#
# The default setting is true (use the JNI code)
#org.opennms.rrd.usejni=true

#
# This property defines whether or not to use the write queuing system.  
# The write queuing queues rrd create and update operations so as not to
# lose collected data due to slow I/O performance.  As the I/O system gets
# behind this leads to multiple data points being stored per file update.
# This leads to greater amortized performanc of the I/O system.  
#
# The default setting is true (use the queuing system)
#org.opennms.rrd.usequeue=true

#
# The following properties of for the queuing system
#
# This property defines how many threads to use to process the queue and
# write the the disk.  The JNI backend is only single thread safe and therefore
# synchronized so having more than two theads really only leads to contention.
#
# The JRobin code however is multi-thread safe and may get some performance benefit
# by increasing threads.  This of course depends on your I/O subsystem.  It is 
# unlikely that more than 10 threads or so are needed here but there may be some
# system where this is not true.
# 
# The default setting is 2
#org.opennms.rrd.queuing.writethreads=2

#
# This property defines whether creates should be processed immediately of enqueued
# list the updates.  Setting it to true enqueues the creates and they are processed
# as the threads get to them.  False, causes the enqueuing thread to block as the
# files are created.  
#
# The default setting is true (enqueue the creates)
#org.opennms.rrd.queuing.queuecreates=true

#
# The queuing system distinguishes between zero valued and non-zero valued updates.
# Zero valued updates are termed 'insignificant' by the queuing system and pushed
# down in priority compared with 'significant' updates which have non-zero values.
# 
# As updates are queued, files which have significant updates in their list of
# pending updates are boosted in priority to ensure that their is written as soon
# as possible.  Files with only insignificant updates are delayed until 'free time'
# exists on the write threads and they have time to be processed.
#
# Given this situation there is an inherent 'unfairness' which on busy systems will
# cause the files with only insignificant updates to never get written.  
# 
# This property represents the number of seconds over which (on average) all
# insignificant files will be promoted to the significant list.  This ensures that
# all files will eventually get written.
#
# An example value for this file would by 21600.  This would cause all the 
# insignificant files to be pushed thru to updates queue over a six hour period
# 
# Setting the value to 0 means don't promote insignificant files at all.
# 
# The default setting is 0 (don't promote insignificant files)
#org.opennms.rrd.queuing.maxInsigUpdateSeconds=0

#
# This queuing system regularly prints statistics regarding queue size, pending 
# operations, enqueue rates, dequeue rates, etc.  These updates are printed every
# so often based on the number of updates that get processed by the system.
# 
# This property defines the modulus indicating how often to print the statistics.
# If (updateCount % modulus) == 0 then printStats;
#
# The default setting is 10000L
#org.opennms.rrd.queuing.modulus=10000

#
# This property defines which log4j category to use when printing the queue
# statistics
#
# The default setting is UNCATEGORIZED
#org.opennms.rrd.queuing.category=UNCATEGORIZED

#
# The following constants are related to how long a write thread lingers before
# it exits.  You probably don't need to change these.  Changing these values will 
# void your warranty.  grins.
# 
#org.opennms.rrd.queuing.writethread.sleepTime=50
#org.opennms.rrd.queuing.writethread.exitDelay=60000

